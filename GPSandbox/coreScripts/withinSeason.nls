to recruit
  ask turtles with [ life-stage = "Juvenile" ]
  [
    set age (age + 1)
    if age >= age-at-first-breeding ;add some variability to this???
    [
      set life-stage "Adult"
    ]
  ]

  ask n-of round(count turtles with [ life-stage = "Juvenile" ]  * juvenile-mortality) turtles
  [
    die
  ]
end

to philopatry-check
  ask males with [ settled? = false and life-stage = "Adult" ]
  [
    ifelse (random-float 1 < male-philopatry)
      [
        set breeding-grounds patch-set patches with [ colony-id = [ natal-ground-id ] of myself]
        set settled? true
    ]
    [
      set breeding-grounds patch-set patches with [ colony-id > 0 and colony-id != [ natal-ground-id ] of myself] ;randomly selecting a new breeding ground from the remaining others
      set settled? true
    ]
  ]
  
    ask females with [ settled? = false and life-stage = "Adult" ]
  [
    ifelse (random-float 1 < female-philopatry)
      [
        set breeding-grounds patch-set patches with [ colony-id = [ natal-ground-id ] of myself]
        set settled? true
    ]
    [
      set breeding-grounds patch-set patches with [ colony-id > 0 and colony-id != [ natal-ground-id ] of myself] ;randomly selecting a new breeding ground from the remaining others
      set settled? true
    ]
  ]

end

to find-breeding-ground ;a task solely for males
  ask males with [ not breeding? and life-stage = "Adult" ]
  [
    show "male moving"
    let tries 1
    
    while [ tries < max-tries ]
    [
      show count breeding-grounds with [ occupancy < occupancy-limit ]
      move-to one-of breeding-grounds with [ occupancy < occupancy-limit ]
      ifelse random-float 1 < habitat-attrac
      [
        set occupancy (occupancy + 1)
        set habitat-attrac (patch-occ * 0.3) + (hab-quality * 0.3) + (local-occ * 0.3)
        set breeding? true
        set tries (tries + max-tries) ; ending
      ]
      [
        set tries (tries + 1) ;updating the number of attempts
      ]
    ] ;;put in an alternative for if the tries = 1 or greater
  ]
end

to find-mate ;a task solely for females
  
  let adult-females females with [ life-stage = "Adult" ]
  
  ask adult-females with [ not breeding? and mating? ] ;females who have a mate already
  [
    show "Mated female moving"
    move-to one-of mate ;move straight to their mate
    if [ breeding? ] of one-of mate
    [
      set breeding? true
      set mating? true
      ask mate
      [
        set mating? true
      ]
    ]
  ]
  
  
  ask adult-females with [ not breeding? and not mating? ] ;females who need to find a mate
  [
    let f-breeding-ground [ breeding-ground-id ] of self
    let free-males males with [ not mating? and breeding-ground-id = f-breeding-ground ]
    
    if count free-males > 0 ;checking there are potential males
    [
      let tries 1
      while [ tries < max-tries and count ( free-males ) > 0 ]
      [
        move-to one-of breeding-grounds with [ occupancy < occupancy-limit and count (males-here with [ mating-id = -1 ]) > 0 ]
        ifelse random-float 1 < habitat-attrac
        [
          let f-mate self
          let m-mate one-of (males-on patch-here) with [mating-id = -1]
          
          ask f-mate 
          [
            set mate m-mate
            set mating-id [mating-id] of m-mate
          ]
          
          ask m-mate
          [
            set mate f-mate
            set mating-id [ who ] of f-mate
            set mating? true
          ]
          move-to one-of mate
          
          set occupancy (occupancy + 1)
          set habitat-attrac (patch-occ * 0.3) + (hab-quality * 0.3) + (local-occ * 0.3)
          set breeding? true
          set mating? true
          set tries (tries + max-tries)
        ]
        [
          set tries (tries + 1) ;updating the number of attempts
        ]
      ] ;;put in an alternative for if the tries = 1 or greater
    ]
  ]
end

to fledge ;need to ask one in each pair to hatch....
  ask females with [ mating? and breeding? ]
  [
    ifelse random-float 1 > 0.49
    [
      hatch-females 1
      [
        set size 3
        set shape "bird side"
        set age 0
        set settled? false
        set breeding? false
        set mating? false
        set last-breeding-success? false
        set life-stage "Juvenile"
        set natal-ground-id colony-id
        set breeding-ground-id 0
        set breeding-grounds no-patches
      ]
    ]
    [
      hatch-males 1
      [
        set size 3
        set shape "bird side"
        set age 0
        set settled? false
        set breeding? false
        set mating? false
        set last-breeding-success? false
        set life-stage "Juvenile"
        set natal-ground-id colony-id
        set breeding-ground-id 0
        set breeding-grounds no-patches
      ]
    ]
    set occupancy (occupancy + 1)
    set habitat-attrac (patch-occ * 0.3) + (hab-quality * 0.3) + (local-occ * 0.3)
  ]
  
end

to mortality
  ;Chick natural mortality
  let chicks turtles with [ life-stage = "Juvenile" and age = 0 ]
  let num-chicks count chicks
  ask n-of ( random-binomial num-chicks chick-mortality ) chicks;chick mortality
  [
    die
  ]

  ;Chick predation deaths
  let chicks-at-risk turtles with [ life-stage = "Juvenile" and age = 0 and predators? ]
  let chick-risk-count count chicks-at-risk
  ask n-of ( random-binomial chick-risk-count chick-predation ) chicks-at-risk ;chick predation
  [
    die
  ]

  ;Adult natural mortality
  let adults turtles with [ life-stage = "Adult" ]
  let num-adults count adults
  ask n-of ( random-binomial num-adults adult-mortality ) adults ;adult mortality
  [
    if mating?
    [
      ask turtles with [ mating-id = self ]
      [
        set mating-id -1
        set mating? false
      ]
    ]
    die
  ]

  ;Adult predation deaths
  let adults-at-risk turtles with [ life-stage = "Adult" and predators? ]
  let adult-risk-count count adults-at-risk
  ask n-of ( random-binomial adult-risk-count adult-predation ) adults-at-risk ;adult predation
  [
    if mating?
    [
      ask turtles with [ mating-id = self ]
      [
        set mating-id -1
        set mating? false
      ]
    ]
    die
  ]

end

to season-reset
  ask turtles
  [
    setxy -50 random-ycor
    set breeding? false
  ]
end
