to recruit
  
  set new-recruits turtles with [ life-stage = "Juvenile" and age = 0]
  
  ask n-of (random-binomial count(new-recruits) juvenile-mortality) new-recruits
  [
    die
  ]
  
  ask turtles
  [
    set age (age + 1)
  ]
  
  ask turtles with [ life-stage = "Juvenile" ]
  [
    if age >= age-at-first-breeding ;add some variability to this???
    [
      set life-stage "Adult"
    ]
  ]
  
  set breeders turtles with [ life-stage = "Adult" ]
  
end

to philopatry-check

  let male-birds males with [ settled? = false and life-stage = "Adult" ]
  type "New male recruits:" show count(male-birds)
  choose-colony male-birds male-philopatry
  
  let female-birds females with [ settled? = false and life-stage = "Adult" ]
    type "New female recruits:" show count(female-birds)
  choose-colony female-birds female-philopatry

end


to choose-colony [ birds philopatry ] ;an agentset of birds who need to choose a colony and the philopatry for that sex
 
  ask birds
  [
    ifelse (random-float 1 < philopatry)
    [
      set breeding-grounds patch-set patches with [ colony-id = [ natal-ground-id ] of myself]
      set settled? true
      set breeding-ground-id natal-ground-id
    ]
    [
      set breeding-grounds patch-set patches with [ colony-id > 0 and colony-id != [ natal-ground-id ] of myself] ;randomly selecting a new breeding ground from the remaining others
      set settled? true
      set breeding-ground-id one-of [ colony-id ] of breeding-grounds 
    ]
  ]
  
end


to find-burrow ;a task solely for males  
  
  let potential-breeders males with [ settled? and not breeding? and life-stage = "Adult" ] ;potential-breeders returning
  let returning-breeders n-of (random-binomial count(potential-breeders) prop-returning-breeders) potential-breeders ;actual returning individuals
 
  if any? returning-breeders ;defensive to make sure that some birds exist.
  [
    ask returning-breeders
    [
      if debug? [ show "male moving" ]
      
      ifelse burrow != no-patches ;moving to burrow if one available
      [
        if debug? [ show burrow ]
        
        move-to burrow ;moving to current burrow
        
        ;moving in?
        ifelse [ occupancy ] of burrow < [ occupancy-limit ] of burrow ;checking there is room still
        [
          est-burrow
        ]
        ;if their current burrow is occupied...
        [ 
          set burrow no-patches ;removing current burrow        
          ifelse count( neighbourhood with [ occupancy < occupancy-limit ] ) > 0 ;checking if they have alternatives in the neighbourhood
          [
            prospect
          ]
          [
            setxy 0 0 ;They quit if there are no burrows free... possibly amend this?
          ]
        ]  
      ]
      
      
      [ ;else statement for birds with no burrow
        let free-burrows count( breeding-grounds with [ occupancy < occupancy-limit ] )
        if free-burrows > 0 
        [ ;else statement if the bird does not have a burrow.
          move-to one-of breeding-grounds with [ occupancy < occupancy-limit ]
          prospect   
        ]
      ]
    ]
  ]
  
end

to prospect
  
  let tries 1
  
  while [ tries < max-tries ]
  [
    let alternatives neighbourhood with [ occupancy < occupancy-limit and habitat-attrac >= [ habitat-attrac ] of self ] ;looking at nearby alternatives
    ifelse count(alternatives) > 0 
    [
      move-to one-of alternatives
      ifelse random-float 1 < habitat-attrac
      [
        est-burrow
        set tries (tries + max-tries) ; ending
      ]
      [
        set tries (tries + 1) ;updating the number of attempts
        if tries >= max-tries
        [
          setxy 0 0 ;giving up and flying off
        ]
      ]
    ]
    [
      move-to one-of breeding-grounds with [ occupancy < occupancy-limit and habitat-attrac >= [ habitat-attrac ] of self ] ;looking further afield !!!!THIS MIGHT NEED TO BE REFINED - KEY ASSUMPTIONS OF KNOWLEDGE BEING MADE!!!! - MAY MEAN THAT THEY TRY REPEATEDLY AT THE SAME SPOT
      ifelse random-float 1 < habitat-attrac
      [
        est-burrow
        set tries (tries + max-tries) ; ending
      ]
      [
        set tries (tries + 1) ;updating the number of attempts
        if tries >= max-tries
        [
          setxy 0 0 ;giving up and flying off
        ]
      ]
    ]
  ] ;;put in an alternative for if the tries = 1 or greater
end

to est-burrow
  
  set occupancy (occupancy + 1)
  set habitat-attrac (patch-occ * 0.3) + (hab-quality * 0.4) + (local-occ * 0.3) ;updating attractiveness
  set breeding? true
  set burrow patch-here
  
end

to find-mate ;a task solely for females
  
  let adult-females females with [ life-stage = "Adult" ]
  
  let old-pairs 0
  
  ask adult-females with [ not breeding? and mating-id >= 0] ;females who have a mate already
  [
      if debug? [ show "Mated female moving" ]
    
    move-to mate ;move straight to their mate
    
    if [ breeding? ] of mate
    [
      set breeding? true
      set mating? true
      
      ask mate ;asking the male to set mating to true too
      [
        set mating? true
      ]
      
      set old-pairs old-pairs + 1
    ]
  ] 
  
  type "Previous pairs mating " show old-pairs ;showing how many previously paired birds are mating
  
  let new-pairs 0
  
  if debug? [type "Unmated females " show count(adult-females with [ mating-id = -1 ])]
  
  ask adult-females with [ not breeding? and mating-id = -1 ] ;females who need to find a mate
  [
    if debug? [ show "Unmated female moving" ]
    let f-breeding-ground [ breeding-ground-id ] of self
    let free-males males with [ mating-id = -1 and breeding? and breeding-ground-id = f-breeding-ground ] 
    
    if count free-males > 0 ;checking there are potential males
    [
      let tries 1
      while [ tries < max-tries and count ( free-males ) > 0 ]
      [
        ifelse tries = 1
        [
        move-to one-of breeding-grounds with [ count (males-here with [ mating-id = -1 ]) > 0 ] ;move to potential breeding ground
        ]
        [
         let alternatives neighbors with [ count (males-here with [ mating-id = -1 ]) > 0 and habitat-attrac > [ habitat-attrac ] of self ]
         ifelse count (alternatives) > 0
          [ 
            move-to one-of alternatives ;move to potential breeding ground
          ]
          [
            move-to one-of breeding-grounds with [ count (males-here with [ mating-id = -1 ]) > 0 ]
          ]
        ]
        
        if debug? [ type "free-males " show count (free-males) ]
       
        ifelse random-float 1 < habitat-attrac ;check if they want to move in
        [
          let f-mate self
          let m-mate one-of (males-on patch-here) with [mating-id = -1]
          
          ask m-mate
          [
            set mate f-mate
            set mating-id [ who ] of f-mate
            set mating? true
          ]        
          
          set breeding? true
          set mating? true
          set mate m-mate
          set mating-id [mating-id] of m-mate
          
          set new-pairs new-pairs + 1 ;counter for number of newly formed pairs 
          set tries (tries + max-tries) ;end the mate hunt
        ]
        [
          set tries (tries + 1) ;updating the number of attempts if they didn't find a mate they liked
        ]
      ] 
    ]
  ]
  
  type "New pairs " show new-pairs ;showing how many newly formed pairs are mating
  
end

to fledging ;need to ask one in each pair to hatch....
  
  let safe-breeders females with [ mating? and breeding? and not predators? ] ; taking the females on the safe islands...
  reproduce safe-breeders false
  
  let unsafe-breeders females with [ mating? and breeding? and predators? ] ; taking the females on the predator infested islands...
  reproduce unsafe-breeders true
  
end

to reproduce [ breeding-birds predation? ]

  ifelse predation?
  [
    let total-mortality chick-predation + natural-chick-mortality
    let n-breed (random-binomial count(breeding-birds) (1 - total-mortality))  * random-normal 1 mortality-sd ;Factoring mortality, predation and noise into the hatch success
    set n-breed round(min(list n-breed count(breeding-birds))) ;preventing cases where more are selected than exist    
    let successful-breeders n-of n-breed breeding-birds
    
    if verbose? [ type "Chicks fledged under predation:" show n-breed ] 
    
    ask successful-breeders
    [
      hatch-chick
    ]
  ]
  [
    let n-breed (random-binomial count(breeding-birds) (1 - natural-chick-mortality))  * random-normal 1 mortality-sd ;Factoring mortality, predation and noise into the hatch success    
    set n-breed round(min(list n-breed count(breeding-birds))) ;preventing cases where more are selected than exist
    let successful-breeders n-of n-breed breeding-birds
      
    if verbose? [ type "Chicks fledged without predation:" show n-breed ]
    
    ask successful-breeders
    [
      hatch-chick
    ]
  ]      
  
end

to hatch-chick
        ifelse random-float 1 > 0.49
      [
        hatch-females 1
        [
          raise-chick orange
        ]
      ]
      [
        hatch-males 1
        [
          raise-chick violet
        ]
      ]
end


to mortality
  
  ;Adult natural mortality
  let adults turtles with [ life-stage = "Adult" and not predators? ]
  let num-adults count adults
  
  let num-fatalities ( random-binomial num-adults adult-mortality )  * random-normal 1 mortality-sd
  set num-fatalities round(min(list num-fatalities num-adults)) 
  let adult-fatalities n-of num-fatalities adults
  
  ask adult-fatalities ;adult mortality
  [
    ;show "Adult fatality"
    if mating-id != -1
    [
      widow
    ]
    die
  ]
  
  ;Adult predation deaths
  let adults-at-risk turtles with [ life-stage = "Adult" and predators? ] 
  let adult-risk-count count adults-at-risk
  
  let num-killed (random-binomial adult-risk-count (adult-mortality + adult-predation))  * random-normal 1 mortality-sd
  set num-killed round(min(list num-killed adult-risk-count)) 
  let adult-killed n-of num-killed adults-at-risk
  
  ask adult-killed;adult predation
  [
    ;show "Adult killed"
    if mating-id != -1
    [
      widow
    ]
    die
  ]
  
  ;senescence of old birds
  let seniors turtles with [age > max-age]
  ask n-of (random-binomial count(seniors) old-mortality) seniors
  [
    if mating-id != -1
    [
      widow
    ]
    die 
  ]
  
end


to widow
  
  ask mate
  [
    set mating-id -1
    set mate no-turtles
    set mating? false
    set burrow no-patches
  ]
  
end

to census

end

;Moving birds off islands, resetting breeding and mating, then clearing burrow current occupancy 
to season-reset
  
  ask turtles
  [
    setxy 0 0
    set breeding? false
    set mating? false
  ]
  
  ask patches
  [
    set occupancy 0
  ]
  
end


  




  
  ;    ;Chick natural mortality
  ;  let chicks turtles with [ life-stage = "Juvenile" and age = 0 ]
  ;  let num-chicks count chicks
  ;  
  ;  show count chicks
  ;  
  ;  
  ;  let unsuccessful-fledge n-of ( random-binomial num-chicks chick-mortality ) chicks;chick mortality
  ;  ask unsuccessful-fledge
  ;  [
  ;    show "Chick dying"
  ;    die
  ;  ]
  ;
  ;  ;Chick predation deaths
  ;  let chicks-at-risk turtles with [ life-stage = "Juvenile" and age = 0 and predators? ]
  ;  let chick-risk-count count chicks-at-risk
  ; 
  ;  show count chicks-at-risk
  ;  
  ;  let predator-kills n-of ( random-binomial chick-risk-count chick-predation ) chicks-at-risk
  ;  ask predator-kills ;chick predation
  ;  [
  ;    show "Chick killed"
  ;    die
  ;  ]
  

  
;  let safe-breeders females with [ mating? and breeding? and not predators? ] ; taking the females on the safe islands...
;  
;  ifelse [predators? [
;    set X ncm * noise
;    set breeding-birds ...
;  ] [set X (ncm + predation-rate) * noise
;    set breeding-birds...
;    ] 
;    let successful-breeders n-of (random-binomial count(safe-breeders) natural-chick-mortality) safe-breeders ;... and determining the number of chicks they successfully hatch
;    
;    if type predators? show count successful-breeders
;    
;    ;Safe island reproduction
;    
;    show count successful-breeders
;    
;    let unsafe-breeders females with [ mating? and breeding? and predators? ] ; taking the females on the predator infested islands...
;    let n-breed (random-binomial count(unsafe-breeders) (chick-predation + natural-chick-mortality)) * random-normal 1 0.1 ;PUT SLIDERS - 0.1 especially
;    let pred-successful-breeders n-breed n-of unsafe-breeders ;... and determining the number of chicks they successfully hatch
;    set pred-successful-breeders pred-successful-breeders 
;    ;Predator island reproduction
;    ask pred-successful-breeders
;    [
;      ifelse random-float 1 > 0.49
;      [
;        hatch-females 1
;        [
;          raise-chick "orange"
;        ]
;      ]
;      [
;        hatch-males 1
;        [
;          raise-chick "purple"
;        ]
;      ]
;    ]
;    show count(pred-successful-breeders)  
